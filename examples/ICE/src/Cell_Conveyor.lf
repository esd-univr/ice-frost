target Python 

import FrostMachine from "../../../src/FrostMachine.lf"
import Conveyor from "Conveyor/conveyor.lf"

preamble{=
    from enum import Enum
    class bay_value(Enum):
        LoadUnloadZone = 5
        Bay1 = 1
        Bay2 = 2
        Bay3 = 3
        Bay4 = 4
=}

reactor Cell_Conveyor extends FrostMachine{
    //PALLETS
    state pallet_1 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet1") =}
    state pallet_2 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet2") =}
    state pallet_3 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet3") =}
    state pallet_4 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet4") =}
    state pallet_5 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet5") =}
    state pallet_6 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet6") =}
    state pallet_7 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet7") =}
    state pallet_8 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet8") =}
    state pallet_9 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet9") =}
    state pallet_10 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet10") =}
    //BAYES
    state LUBay = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Bayes/LoadUnloadZone") =}
    state Bay1 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Bayes/Bay1") =}
    state Bay2 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Bayes/Bay2") =}
    state Bay3 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Bayes/Bay3") =}
    state Bay4 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Bayes/Bay4") =}
    //SEGMENTS
    state Segment1 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Segments/Segment1") =}
    state Segment2 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Segments/Segment2") =}
    state Segment3 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Segments/Segment3") =}
    state Segment4 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Segments/Segment4") =}
    state Segment5 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Segments/Segment5") =}
    state Segment6 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Segments/Segment6") =}
    state Segment7 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Segments/Segment7") =}
    state Segment8 = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Segments/Segment8") =}
    
    //METHODS
    state setPalletDestination = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/setDestination") =}
    state release = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/release") =}
    state setPalletDestinationWithReservation = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/setPalletDestinationWithReservation") =}
    state callFreePalletTo = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/callFreePalletTo") =}
    state callFreePalletToWithReservation = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/callFreePalletToWithReservation") =}
    state callFreePalletOfTypeTo = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/callFreePalletOfTypeTo") =}
    state callFreePalletOfTypeToWithReservation = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/callFreePalletOfTypeToWithReservation") =}
    state reservePallet = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/reservePallet") =}
    state releasePallet = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/releasePallet") =}
    state setPartOnPallet = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/setPartOnPallet") =}
    state clearPartOnPallet = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/clearPartOnPallet") =}

    //DESTINATIONS
    state destinations_folder = {= self.data_model.get_node("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Destinations") =}
    //COMMANDS
    state command = {= self.data_model.get_node("Cell_Conveyor/command") =}    
    //LocalVariables
    state pallets = {= [self.pallet_1, self.pallet_2, self.pallet_3, self.pallet_4, self.pallet_5, self.pallet_6, self.pallet_7, self.pallet_8, self.pallet_9, self.pallet_10] =}
    state segments = {= [self.Segment1, self.Segment2, self.Segment3, self.Segment4, self.Segment5, self.Segment6, self.Segment7, self.Segment8] =}
    state bayes = {= {5: self.LUBay, 11:self.Bay1, 21:self.Bay2, 31:self.Bay3, 41:self.Bay4} =}    
    state segment_items = {= ["item0", "item1", "item2", "item3", "item4", "item5", "item6", "item7", "item8", "item9"] =}
    state bay_out = {=[]=}
    state out = {=self.data_model.get_node("Cell_Conveyor/output")=}
    state dict_bay = {= {
                        0:21,
                        1:31, 
                        2:41, 
                        3:5,
                        4:41,
                        5:31,
                        6:21,
                        7:11
                    } =}

    conveyor = new Conveyor()
    logical action check
    state dict_bay_conveyor = {= {
                        1:"Z",
                        2:"P", 
                        3:"O", 
                        4:"N",
                        5:"G",
                    } =}
    logical action delay
    state messages_to_conveyor = {=[]=}
    reaction(check) -> conveyor.from_frost{=
        if self.messages_to_conveyor:
            conveyor.from_frost.set(self.messages_to_conveyor.pop(0))
            check.schedule(0)
        else:
            check.schedule(SEC(1))
    =}

    reaction(conveyor.to_frost){=
        cmd = conveyor.to_frost.value[0]
        lst = conveyor.to_frost.value[1]
        if cmd == 1:
            if lst[1] == "G":
                self.LUBay.get_property("IndexPosition").get_property("palletNum").value  = lst[0]
            elif lst[1] == 1:
                self.Bay1.get_property("PalletPosition1").get_property("palletNum").value = lst[2]

            
        self.out.value = True
    =}
    
    method setPalletDest(palletNumber, destination){=
        pallet = self.pallets[palletNumber-1]
        (pallet.get_property("destination")).value =  destination
        res = str(destination)
        if destination != 5:            
            self.command.write("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Bayes/Bay" + res[0] + "/PalletPosition" + res[1] + "/palletNum")
        else:
            self.command.write("Cell_Conveyor/ConveyorHMI/ConveyorObjects/Bayes/LoadUnloadZone/IndexPosition/palletNum")
        temp1 = destination
        temp2 = ""
        if temp1 != 5:
            temp1 = destination / 10
            temp2 = str(destination % 10)
        letter = self.dict_bay_conveyor[int(temp1)]
        self.messages_to_conveyor.append([1, [palletNumber, str(letter + temp2)]]
        )
        return res
    =}
    
    method releaseP(palletNumber){=
        pallet = self.pallets[palletNumber-1]
        self.bay_out.append(pallet.get_property("destination").value)
        dest = pallet.get_property("destination").value
        res = str(dest)
        if dest != 5:
            res = res[:len(res)//2] + "_" + res[len(res)//2:]
            self.command.write("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Destinations/destination_palletid_" + res)
        else:
            self.command.write("Cell_Conveyor/ConveyorHMI/ConveyorDataExchange/Destinations/destination_palletid_" + str(dest))

        self.messages_to_conveyor.append([7, [palletNumber]])
        return True
    =}

    method check_next_bay(destination, seg_id){=
        if destination > 5:
            destination = int(destination / 10)
        if destination == bay_value.LoadUnloadZone.value  and seg_id == 3: # LoadUnloadZone
            return True
        elif destination == bay_value.Bay1.value and seg_id == 7: # Bay1 SPEA (Cell1)
            return True
        elif destination == bay_value.Bay2.value and (seg_id == 0 or seg_id == 6): # Bay2 Milling (Cell2)
            return True
        elif destination == bay_value.Bay3.value and (seg_id == 1 or seg_id == 5): # Bay3 KUKA and ABB (Cell4)
            return True
        elif destination == bay_value.Bay4.value and (seg_id == 2 or seg_id == 4): # Bay4 Quality (Cell5)
            return True
        return False
    =}

    method addPalletToBay(bay, pallet_id){=
        if bay.name == "LoadUnloadZone":
            bay.get_property("IndexPosition").get_property("palletNum").write(pallet_id)
            self.destinations_folder["destination_palletid_5"].write(pallet_id)
        elif bay.name == "Bay1":
            bay.get_property("PalletPosition1").get_property("palletNum").write(pallet_id)
            self.destinations_folder["destination_palletid_1_1"].write(pallet_id)
        elif bay.name == "Bay2":
            bay.get_property("PalletPosition1").get_property("palletNum").write(pallet_id)
            self.destinations_folder["destination_palletid_2_1"].write(pallet_id)
        elif bay.name == "Bay3":
            bay.get_property("PalletPosition1").get_property("palletNum").write(pallet_id)
            self.destinations_folder["destination_palletid_3_1"].write(pallet_id)
        elif bay.name == "Bay4":
            bay.get_property("PalletPosition1").get_property("palletNum").write(pallet_id)
            self.destinations_folder["destination_palletid_4_1"].write(pallet_id)
        self.out.write(True)
   =}

    method is_bay_free(destination, pallet_id){=
        pos = destination % 10
        bay = int(destination / 10)
        if destination == 5:
            pos = None
            bay = destination
        target_pos = "destination_palletid_"
        if bay == bay_value.LoadUnloadZone.value and self.destinations_folder[target_pos + str(bay_value.LoadUnloadZone.value)].value == 0:
            self.destinations_folder[target_pos + str(bay_value.LoadUnloadZone.value)].write(pallet_id)
            return True
        elif bay == bay_value.Bay1.value:
            for i in range(1, pos + 1):
                if self.destinations_folder[target_pos + str(bay_value.Bay1.value) + "_" + str(i)].value != 0:
                    return False
            self.destinations_folder[target_pos + str(bay_value.Bay1.value) + "_" + str(1)].write(pallet_id)
            return True
        elif bay == bay_value.Bay2.value:
            for i in range(1, pos + 1):
                if self.destinations_folder[target_pos + str(bay_value.Bay2.value) + "_" + str(i)].value != 0:
                    return False
            self.destinations_folder[target_pos + str(bay_value.Bay2.value) + "_" + str(1)].write(pallet_id)
            return True
        elif bay == bay_value.Bay3.value:
            for i in range(1, pos + 1):
                if self.destinations_folder[target_pos + str(bay_value.Bay3.value) + "_" + str(i)].value != 0:
                    return False
            self.destinations_folder[target_pos + str(bay_value.Bay3.value) + "_" + str(1)].write(pallet_id)
            return True
        elif bay == bay_value.Bay4.value:
            for i in range(1, pos + 1):
                if self.destinations_folder[target_pos + str(bay_value.Bay4.value) + "_" + str(i)].value != 0:
                    return False
            self.destinations_folder[target_pos + str(bay_value.Bay4.value) + "_" + str(1)].write(pallet_id)
            return True

        return False
    =}

    method move_interchanges(delay){=
        for seg_num, segment in enumerate(self.segments):
            #Shall any pallet go out of the bays?
            if self.dict_bay[seg_num] in self.bay_out:                
                next_segment = None
                if seg_num == 7:
                    next_segment = self.segments[0]
                else:
                    next_segment = self.segments[seg_num + 1]
                    item9 = next_segment.get_property("FIFO").get_property("item9")
                if item9.value == 0:
                    bay = self.bayes[self.dict_bay[seg_num]]
                    palletNumber = 0
                    if bay.name == "LoadUnloadZone":
                        palletNumber = bay.get_property("IndexPosition").get_property("palletNum").value
                        bay.get_property("IndexPosition").get_property("palletNum").write(0)
                    else:
                        palletNumber = bay.get_property("PalletPosition1").get_property("palletNum").value
                        bay.get_property("PalletPosition1").get_property("palletNum").write(0)
                    res = str(self.dict_bay[seg_num])
                    if self.dict_bay[seg_num] != 5:
                        res = res[:len(res)//2] + "_" + res[len(res)//2:]
                    s = "destination_palletid_" + res
                    self.destinations_folder[s].write(0)
                    item9.write(palletNumber)             
                    next_segment.get_property("FIFO").get_property("size").write(next_segment.get_property("FIFO").get_property("size").value + 1)
                    self.pallets[palletNumber-1].get_property("destination").write(0)
                    self.bay_out.remove(self.dict_bay[seg_num])
                    self.out.value = True
                continue
            #Shall any pallet go to the bays?
            size_of_seg = segment.get_property("FIFO").get_property("size")
            first_pos = segment.get_property("FIFO").get_property("item0")
            first_pos_value = first_pos.value
            first_pallet = self.pallets[first_pos_value-1]
            if first_pos_value != 0 and first_pallet.get_property("destination").value != 0:
                destination = first_pallet.get_property("destination").value
                if self.check_next_bay(destination, seg_num) and self.is_bay_free(destination, first_pos_value):
                    bay = self.bayes[self.pallets[first_pos_value-1].get_property("destination").value]
                    self.addPalletToBay(bay, first_pos_value)
                    first_pos.write(0)
                    size_of_seg.write(size_of_seg.value - 1)
                    continue
            #Move current pallet to next segment
            next_segment = None
            if seg_num == 7:
                next_segment = self.segments[0]
            else:
                next_segment = self.segments[seg_num + 1]
            item9 = next_segment.get_property("FIFO").get_property("item9")
            if item9.value == 0:
                item9.write(first_pos_value)
                first_pos.write(0)
                first_pos_value = 0                        
                next_segment.get_property("FIFO").get_property("size").write(next_segment.get_property("FIFO").get_property("size").value + 1)
   =}

    method move_pallets(seg_num, segment){=
        size_of_seg = segment.get_property("FIFO").get_property("size")
        if size_of_seg.value == 0:
            return

        # Iterate over each item in the segment's FIFO queue
        for i in range(len(self.segment_items) - 1):
            current_pos = segment.get_property("FIFO").get_property(self.segment_items[i])
            curr_value = current_pos.value
            next_pos = segment.get_property("FIFO").get_property(self.segment_items[i+1])
            next_value = next_pos.value
            if next_value == 0:
                continue

            # Move pallets over segment
            if curr_value == 0:
                #print(next_value, ":", seg_num, i)
                current_pos.write(next_value)
                next_pos.write(0)
    =}

    reaction(startup)-> check{=
        check.schedule(SEC(1))
        self.setPalletDestination.callback = self.setPalletDest
        self.release.callback = self.releaseP
        (self.Segment1.get_property("FIFO")).get_property("item0").write(1)
        (self.Segment1.get_property("FIFO")).get_property("item1").write(2)
        (self.Segment1.get_property("FIFO")).get_property("item2").write(3)
        (self.Segment1.get_property("FIFO")).get_property("item3").write(4)
        (self.Segment1.get_property("FIFO")).get_property("item4").write(5)
        (self.Segment1.get_property("FIFO")).get_property("item5").write(6)
        (self.Segment1.get_property("FIFO")).get_property("item6").write(7)
        (self.Segment1.get_property("FIFO")).get_property("item7").write(8)
        (self.Segment1.get_property("FIFO")).get_property("item8").write(9)
        (self.Segment1.get_property("FIFO")).get_property("item9").write(10)
        (self.Segment1.get_property("FIFO")).get_property("size").write(10)
    =}
    '''
    //Timers for making segments moving
    timer first_ring(0ms, 970ms)
    reaction(first_ring){=
        self.move_pallets(1, self.Segment2)
        self.move_pallets(6, self.Segment7)
    =}    

    timer second_ring(0ms, 570ms)
    reaction(second_ring){=
        self.move_pallets(0, self.Segment1)        
        self.move_pallets(7, self.Segment8)
    =}

    timer third_ring(0ms, 540ms)
    reaction(third_ring){=
        self.move_pallets(2, self.Segment3)
        self.move_pallets(5, self.Segment6)
    =}

    timer fourth_ring(0ms, 300ms)
    reaction(fourth_ring){=
        self.move_pallets(3, self.Segment4)
        self.move_pallets(4, self.Segment5)
    =}  

    //Timers for making interchanges moving
    timer move_bay(0, 5s)
    reaction(move_bay)-> delay{=
        self.move_interchanges(delay)
    =}

    reaction(delay){=
        self.out.value = True
    =}
    '''
}