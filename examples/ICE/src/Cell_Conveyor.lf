target Python 

import GlacierMachine from "../../../glacier/src/GlacierMachine.lf"

preamble{=
    from enum import Enum
    class bay_value(Enum):
        LoadUnloadZone = 5
        Bay1 = 1
        Bay2 = 2
        Bay3 = 3
        Bay4 = 4
=}

reactor Cell_Conveyor extends GlacierMachine{
    //PALLETS
    state pallet_1 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet1") =}
    state pallet_2 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet2") =}
    state pallet_3 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet3") =}
    state pallet_4 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet4") =}
    state pallet_5 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet5") =}
    state pallet_6 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet6") =}
    state pallet_7 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet7") =}
    state pallet_8 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet8") =}
    state pallet_9 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet9") =}
    state pallet_10 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Pallets/Pallet10") =}
    //BAYES
    state LUBay = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Bayes/LoadUnloadZone") =}
    state Bay1 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Bayes/Bay1") =}
    state Bay2 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Bayes/Bay2") =}
    state Bay3 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Bayes/Bay3") =}
    state Bay4 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Bayes/Bay4") =}
    //SEGMENTS
    state Segment1 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Segments/Segment1") =}
    state Segment2 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Segments/Segment2") =}
    state Segment3 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Segments/Segment3") =}
    state Segment4 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Segments/Segment4") =}
    state Segment5 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Segments/Segment5") =}
    state Segment6 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Segments/Segment6") =}
    state Segment7 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Segments/Segment7") =}
    state Segment8 = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorObjects/Segments/Segment8") =}
    
    //METHODS
    state setPalletDestination = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/setDestination") =}
    state setPalletDestinationWithReservation = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/setPalletDestinationWithReservation") =}
    state callFreePalletTo = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/callFreePalletTo") =}
    state callFreePalletToWithReservation = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/callFreePalletToWithReservation") =}
    state callFreePalletOfTypeTo = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/callFreePalletOfTypeTo") =}
    state callFreePalletOfTypeToWithReservation = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/callFreePalletOfTypeToWithReservation") =}
    state reservePallet = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/reservePallet") =}
    state releasePallet = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/releasePallet") =}
    state setPartOnPallet = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/setPartOnPallet") =}
    state clearPartOnPallet = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorDataExchange/Commands/ConveyorCommandsPointer/clearPartOnPallet") =}

    //DESTINATIONS
    state destinations_folder = {= self.data_model.get_node("CellConveyor/ConveyorHMI/ConveyorDataExchange/Destinations") =}
    //COMMANDS
    state command = {= self.data_model.get_node("CellConveyor/command") =}    
    //LocalVariables
    state pallets = {= [self.pallet_1, self.pallet_2, self.pallet_3, self.pallet_4, self.pallet_5, self.pallet_6, self.pallet_7, self.pallet_8, self.pallet_9, self.pallet_10] =}
    state segments = {= [self.Segment1, self.Segment2, self.Segment3, self.Segment4, self.Segment5, self.Segment6, self.Segment7, self.Segment8] =}
    state bayes = {= {5: self.LUBay, 11:self.Bay1, 21:self.Bay2, 31:self.Bay3, 41:self.Bay4} =}    
    state pallet_with_dest = {= [] =}
    state segment_items = {= ["item0", "item1", "item2", "item3", "item4", "item5", "item6", "item7", "item8", "item9"] =}

    method setPalletDest(palletNumber, destination){=
        pallet = self.pallets[palletNumber-1]
        self.data_model.write_variable(
            (pallet.get_property("destination")).id, destination
        )
        res = str(destination)
        if destination != 5:
            res = res[:len(res)//2] + "_" + res[len(res)//2:]
            self.command.update("CellConveyor/ConveyorHMI/ConveyorDataExchange/Destinations/destination_palletid_" + res)
        return 
    =}

    method check_next_bay(destination, seg_id){=
        destination = int(destination / 10)
        if destination == bay_value.LoadUnloadZone.value  and seg_id == 3: # LoadUnloadZone
            return True
        elif destination == bay_value.Bay1.value and seg_id == 7: # Bay1 SPEA (Cell1)
            return True
        elif destination == bay_value.Bay2.value and (seg_id == 0 or seg_id == 6): # Bay2 Milling (Cell2)
            return True
        elif destination == bay_value.Bay3.value and (seg_id == 1 or seg_id == 5): # Bay3 KUKA and ABB (Cell4)
            return True
        elif destination == bay_value.Bay4.value and (seg_id == 2 or seg_id == 4): # Bay4 Quality (Cell5)
            return True
        return False
    =}

    method addPalletToBay(bay, pallet_id){=
        print(bay, pallet_id)
        if bay.name == "LoadUnloadZone":
            bay.get_property("IndexPosition").get_property("palletNum").update(pallet_id)
            self.destinations_folder["destination_palletid_5"].update(pallet_id)
        elif bay.name == "Bay1":
            bay.get_property("PalletPosition1").get_property("palletNum").update(pallet_id)
            self.destinations_folder["destination_palletid_1_1"].update(pallet_id)
        elif bay.name == "Bay2":
            bay.get_property("PalletPosition1").get_property("palletNum").update(pallet_id)
            self.destinations_folder["destination_palletid_2_1"].update(pallet_id)
        elif bay.name == "Bay3":
            bay.get_property("PalletPosition1").get_property("palletNum").update(pallet_id)
            self.destinations_folder["destination_palletid_3_1"].update(pallet_id)
        elif bay.name == "Bay4":
            bay.get_property("PalletPosition1").get_property("palletNum").update(pallet_id)
            self.destinations_folder["destination_palletid_4_1"].update(pallet_id)
    =}

    method is_bay_free(destination, pallet_id){=
        pos = destination % 10
        bay = int(destination / 10)
        target_pos = "destination_palletid_"
        print("dest: ", destination, pos, bay, pallet_id)
        if bay == bay_value.LoadUnloadZone.value and self.destinations_folder[target_pos + bay_value.LoadUnloadZone.value].read() == 0:
            self.destinations_folder[target_pos + bay_value.LoadUnloadZone.value].update(pallet_id)
            return True
        elif bay == bay_value.Bay1.value:
            for i in range(1, pos + 1):
                if self.destinations_folder[target_pos + str(bay_value.Bay1.value) + "_" + str(i)].read() != 0:
                    return False
            self.destinations_folder[target_pos + str(bay_value.Bay1.value) + "_" + str(1)].update(pallet_id)
            return True
        elif bay == bay_value.Bay2.value:
            for i in range(1, pos + 1):
                if self.destinations_folder[target_pos + str(bay_value.Bay2.value) + "_" + str(i)].read() != 0:
                    return False
            self.destinations_folder[target_pos + str(bay_value.Bay2.value) + "_" + str(1)].update(pallet_id)
            return True
        elif bay == bay_value.Bay3.value:
            for i in range(1, pos + 1):
                if self.destinations_folder[target_pos + str(bay_value.Bay3.value) + "_" + str(i)].read() != 0:
                    return False
            self.destinations_folder[target_pos + str(bay_value.Bay3.value) + "_" + str(1)].update(pallet_id)
            return True
        elif bay == bay_value.Bay4.value:
            for i in range(1, pos + 1):
                if self.destinations_folder[target_pos + str(bay_value.Bay4.value) + "_" + str(i)].read() != 0:
                    return False
            self.destinations_folder[target_pos + str(bay_value.Bay4.value) + "_" + str(1)].update(pallet_id)
            return True

        return False
    =}

    method move_interchanges(){=
        for seg_num, segment in enumerate(self.segments):
            size_of_seg = segment.get_property("FIFO").get_property("size")
            if size_of_seg.read() == 0:
                continue

            first_pos = segment.get_property("FIFO").get_property("item0")
            first_pos_value = first_pos.read()
            first_pallet = self.pallets[first_pos_value-1]
            if first_pos_value != 0 and first_pallet.get_property("destination").read() != 0:
                destination = first_pallet.get_property("destination").read()
                print(seg_num, first_pos_value, first_pallet.get_property("destination").read())
                if self.check_next_bay(destination, seg_num) and self.is_bay_free(destination, first_pos_value):
                    bay = self.bayes[self.pallets[first_pos_value-1].get_property("destination").read()]
                    self.addPalletToBay(bay, first_pos_value)
                    first_pos.update(0)
                    size_of_seg.update(size_of_seg.read() - 1)
                    continue
                
            next_segment = None
            if seg_num == 7:
                next_segment = self.segments[0]
            else:
                next_segment = self.segments[seg_num + 1]
            item9 = next_segment.get_property("FIFO").get_property("item9")
            if item9.read() == 0:
                item9.update(first_pos_value)
                first_pos.update(0)
                first_pos_value = 0                        
                next_segment.get_property("FIFO").get_property("size").update(next_segment.get_property("FIFO").get_property("size").read() + 1)
        
    =}

    method move_bayes(){=
        for pallet in self.pallet_with_dest:
            dest = pallet.get_property("destination").read()
            bay = int(dest / 10)
            if bay == bay_value.LoadUnloadZone.value:
                continue
            
            pos = int(dest % 10)

    =}

    method move_pallets(){=
        # Iterate over each segment
        for seg_num, segment in enumerate(self.segments):
            size_of_seg = segment.get_property("FIFO").get_property("size")
            if size_of_seg.read() == 0:
                continue

            # Iterate over each item in the segment's FIFO queue
            for i in range(len(self.segment_items) - 1):
                current_pos = segment.get_property("FIFO").get_property(self.segment_items[i])
                curr_value = current_pos.read()
                next_pos = segment.get_property("FIFO").get_property(self.segment_items[i+1])
                next_value = next_pos.read()
                if next_value == 0:
                    continue

                # Move pallets over segment
                if curr_value == 0:
                    current_pos.update(next_value)
                    next_pos.update(0)
    =}

    reaction(startup){=
        self.setPalletDestination.callback = self.setPalletDest
        (self.Segment1.get_property("FIFO")).get_property("item0").update(1)
        (self.Segment1.get_property("FIFO")).get_property("item1").update(2)
        (self.Segment1.get_property("FIFO")).get_property("item2").update(3)
        (self.Segment1.get_property("FIFO")).get_property("item3").update(4)
        (self.Segment1.get_property("FIFO")).get_property("item4").update(5)
        (self.Segment1.get_property("FIFO")).get_property("item5").update(6)
        (self.Segment1.get_property("FIFO")).get_property("item6").update(7)
        (self.Segment1.get_property("FIFO")).get_property("item7").update(8)
        (self.Segment1.get_property("FIFO")).get_property("item8").update(9)
        (self.Segment1.get_property("FIFO")).get_property("item9").update(10)
        (self.Segment1.get_property("FIFO")).get_property("size").update(10)
    =}

    reaction(work){=
        #self.move_bayes()
        self.move_interchanges()
        self.move_pallets()
    =}    

}