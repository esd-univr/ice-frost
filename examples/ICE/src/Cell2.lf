target Python 

import GlacierMachine from "../../../glacier/src/GlacierMachine.lf"

reactor Cell2 extends GlacierMachine{
    //METHOD
    state start_mission = {= self.data_model.get_node("OPCUA/MES/Methods/StartMission")=}
    state engrave_text = {= self.data_model.get_node("OPCUA/MES/Methods/engraveText")=}

    //VARIABLE
    state busy = {= self.data_model.get_node("OPCUA/MES/MESBusy")=}
    state last_result = {= self.data_model.get_node("OPCUA/MES/MESLastResult")=}
    state current_mission = {= self.data_model.get_node("OPCUA/MES/CurrentMission")=}
    state mes = {= self.data_model.get_node("OPCUA/MES") =}
    state board = {= self.data_model.get_node("OPCUA/MES/Board")=}
    state text = {= self.data_model.get_node("OPCUA/MES/TextToWrite")=}
    timer work(0ms, 1000ms)
    logical action delay
    reaction(work) -> delay{=
        if self.busy.read():
            if self.current_mission.read() == "TakeBoard":
                if not self.board.read():
                    self.board.update(True)               
                    delay.schedule(SEC(10))
            elif self.current_mission.read() == "engraveText":
                if not self.text.read() == "":
                    self.text.update("")
                    delay.schedule(SEC(40))
            elif self.current_mission.read() == "TakeBoardOut":
                if self.board.read():
                    self.board.update(False)
                    delay.schedule(SEC(10))
    =}

    reaction(delay){=
        self.last_result.update(True)
        self.current_mission.update("")
        self.busy.update(False)        
    =}

}