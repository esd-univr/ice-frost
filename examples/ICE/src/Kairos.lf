target Python

import Model from "../../../glacier/src/Model.lf"


reactor Kairos extends Model{
    
    state start_mission = {= self.data_model.get_node("RBKairos/Mission_Methods/start_mission") =}
    state preempt_running_mission = {= self.data_model.get_node("RBKairos/Mission_Methods/preemptRunningMission") =}

    state control_busy = {= self.data_model.get_node("RBKairos/Mission_Methods/Control_Busy") =}
    state last_mission_result = {= self.data_model.get_node("RBKairos/Mission_Methods/Last_Mission_Result") =}
    state missions_call_counter = {= self.data_model.get_node("RBKairos/Mission_Methods/Missions_Call_Counter") =}
    state ongoing_mission_feedback = {= self.data_model.get_node("RBKairos/Mission_Methods/Ongoing_Mission_Feedback") =}
    state ongoing_mission_name = {= self.data_model.get_node("RBKairos/Mission_Methods/Ongoing_Mission_Name") =}

    state act
    reaction (startup){=
        assert isinstance(self.start_mission, MethodNode), "start_mission Node not found"
        assert isinstance(self.preempt_running_mission, MethodNode), "preempt_running_mission Node not found"
        self.start_mission.callback = self.startMission
        self.preempt_running_mission.callback = self.preemptMission
    =}

    method startMission(name){=
        self.ongoing_mission_name.update(name)
        self.missions_call_counter.update(self.missions_call_counter.read() + 1)   
        self.control_busy.update(True)
        self.last_mission_result.update(True)  
        return self.last_mission_result.read()
    =}

    method preemptMission(){=
        self.control_busy.update(False)
        self.ongoing_mission_feedback.update("Mission aborted")
        self.last_mission_result.update(False)
        self.ongoing_mission_name.update("")
        return self.last_mission_result.read()
    =}

    reaction(durable_method)-> durable_method, durable_method_end{=
        durable_method_end.schedule(SEC(1), self.protocol_mng.handle_message(durable_method.value))
    =}

}
