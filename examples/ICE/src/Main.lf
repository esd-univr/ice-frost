target Python{
    fast: True,
    timeout: 3600s,
    files: [../models/l_formatter.py, ../models/time_utils.py, ../models/singleton_meta.py],
    logging: warn 
}

import Cell1 from "Cell1.lf"
import Cell2 from "Cell2.lf"
import Cell4 from "Cell4.lf"
import Cell5 from "Cell5.lf" 
import Warehouse from "Warehouse.lf"
import Kairos from "Kairos.lf"
import Cell_Conveyor from "Cell_Conveyor.lf"

import GlacierBus from "../../../glacier/src/GlacierBus.lf"
import Scheduler from "Scheduler.lf"

preamble{=
    import yaml
    import math 
    from enum import Enum
    CONFIG_PATH = "models/configuration.yaml"
    from machine_data_model.protocols.glacier_v1.glacier_message import GlacierMessage
    from machine_data_model.protocols.glacier_v1.glacier_header import MsgType, MsgNamespace, ProtocolMsgName, GlacierHeader
    from machine_data_model.protocols.glacier_v1.glacier_payload import VariablePayload, ProtocolPayload, MethodPayload 
    from machine_data_model.protocols.glacier_v1.glacier_protocol_mng import GlacierProtocolMng
    from machine_data_model.builder.data_model_builder import DataModelBuilder
    from machine_data_model.protocols.protocol_mng import Message
    from machine_data_model.nodes.method_node import MethodNode, AsyncMethodNode
    from machine_data_model.nodes.composite_method.composite_method_node import CompositeMethodNode
    from machine_data_model.nodes.variable_node import NumericalVariableNode, StringVariableNode, BooleanVariableNode, ObjectVariableNode
    from machine_data_model.nodes.folder_node import FolderNode
    import uuid
    import logging
    from singleton_meta import SingletonMeta
    from enum import IntEnum
    from time_utils import TimeUtils, TimeFormat, convert, f_convert
    from l_formatter import LFormatter    
=}


main reactor{

    preamble{=
        with open(CONFIG_PATH) as stream:
            config = yaml.safe_load(stream)
        TIME_FORMAT = TimeFormat[config["time_format"]]

        handler = logging.StreamHandler()
        handler.setFormatter(LFormatter(lf.time.logical_elapsed, TIME_FORMAT))
        logger = logging.getLogger()
        logger.setLevel(logging.ERROR)
        logger.addHandler(handler)
    =}


    cell1 = new Cell1(model_path = "models/Cell1.yml")
    cell2 = new Cell2(model_path = "models/Cell2.yml")
    cell4 = new Cell4(model_path = "models/Cell4.yml")
    cell5 = new Cell5(model_path = "models/Cell5.yml")
    warehouse = new Warehouse(model_path = "models/Warehouse.yml")
    kairos_aa = new Kairos(model_path = "models/RBKairos.yml")
    conveyor = new Cell_Conveyor(model_path= "models/Cell_Conveyor.yml")
    scheduler = new Scheduler(recipe_path = "../ICE/recipes/recipes/4_machines_recipe.yaml", condition_path = "../ICE/recipes/conditions/4_machines_conditions.yaml")
    bus = new GlacierBus(model_path = "models/Common_Bus.yml",width = 8)
    
    #Full demo
    cell1.channel_out, cell2.channel_out, cell5.channel_out, warehouse.channel_out, scheduler.channel_out, kairos_aa.channel_out, conveyor.channel_out, cell4.channel_out -> bus.channel_in after 1 msec
    bus.channel_out -> cell1.channel_in, cell2.channel_in, cell5.channel_in, warehouse.channel_in, scheduler.channel_in, kairos_aa.channel_in, conveyor.channel_in, cell4.channel_in after 1 msec

    #Demo with 2 machine recipe
    //warehouse.channel_out, kairos_aa.channel_out, scheduler.channel_out -> bus.channel_in after 1 msec
    //bus.channel_out -> warehouse.channel_in, kairos_aa.channel_in, scheduler.channel_in after 1 msec

    #Demo with 4 machine recipe
    //cell5.channel_out, warehouse.channel_out, kairos_aa.channel_out, scheduler.channel_out, conveyor.channel_out -> bus.channel_in after 1 msec
    //bus.channel_out -> cell5.channel_in, warehouse.channel_in, kairos_aa.channel_in, scheduler.channel_in, conveyor.channel_in after 1 msec

    #Demo with just Conveyor
    //conveyor.channel_out, scheduler.channel_out -> bus.channel_in after 1 msec
    //bus.channel_out -> conveyor.channel_in, scheduler.channel_in after 1 msec

}