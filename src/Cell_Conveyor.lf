target Python{
    files: [Conveyor/conveyor_utils.py]
}

import FrostMachine from "../frost/src/lib/FrostMachine.lf"
import Conveyor from "Conveyor/conveyor.lf"

reactor Cell_Conveyor extends FrostMachine{

    preamble{=
       from conveyor_utils import (
            conveyor_obj, Pallets, Bayes, Segments, Commands, commands_pointer,
            IndexPosition, setDestination, PalletPosition, palletNum,
            Pallet, Pallet1, Pallet2, Pallet3, Pallet4, Pallet5, Pallet6, Pallet7, Pallet8, Pallet9, Pallet10,
            Bay, Bay1, Bay2, Bay3, Bay4, Bay5,
            Segment, Segment1, Segment2, Segment3, Segment4, Segment5, Segment6, Segment7, Segment8,
            FIFO, size, item
        )
    =}

    //PALLETS
    state pallet_1 = {= self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet1) =}
    state pallet_2 = {= self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet2) =}
    state pallet_3 = {= self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet3) =}
    state pallet_4 = {= self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet4) =}
    state pallet_5 = {= self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet5) =}
    state pallet_6 = {= self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet6) =}
    state pallet_7 = {= self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet7) =}
    state pallet_8 = {= self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet8) =}
    state pallet_9 = {= self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet9) =}
    state pallet_10 = {= self.data_model.get_node(self.conveyor_obj + self.Pallets + self.Pallet10) =}
    //BAYES     
    state bay1 = {= self.data_model.get_node(self.conveyor_obj + self.Bayes + self.Bay1) =}
    state bay2 = {= self.data_model.get_node(self.conveyor_obj + self.Bayes + self.Bay2) =}
    state bay3 = {= self.data_model.get_node(self.conveyor_obj + self.Bayes + self.Bay3) =}
    state bay4 = {= self.data_model.get_node(self.conveyor_obj + self.Bayes + self.Bay4) =}
    state bay5 = {= self.data_model.get_node(self.conveyor_obj + self.Bayes + self.Bay5) =}

    state pallets_in_bay = {={1: None, 2: None, 3: None, 4: None, 5: None, 6: None, 7: None, 8: None, 9: None, 10: None}=}

    //SEGMENTS
    state segment_1 = {= self.data_model.get_node(self.conveyor_obj + self.Segments + self.Segment1) =}
    state segment_2 = {= self.data_model.get_node(self.conveyor_obj + self.Segments + self.Segment2) =}
    state segment_3 = {= self.data_model.get_node(self.conveyor_obj + self.Segments + self.Segment3) =}
    state segment_4 = {= self.data_model.get_node(self.conveyor_obj + self.Segments + self.Segment4) =}
    state segment_5 = {= self.data_model.get_node(self.conveyor_obj + self.Segments + self.Segment5) =}
    state segment_6 = {= self.data_model.get_node(self.conveyor_obj + self.Segments + self.Segment6) =}
    state segment_7 = {= self.data_model.get_node(self.conveyor_obj + self.Segments + self.Segment7) =}
    state segment_8 = {= self.data_model.get_node(self.conveyor_obj + self.Segments + self.Segment8) =}
    
    //METHODS
    state setPalletDestination = {= self.data_model.get_node(self.commands_pointer + "setDestination") =}    
    //COMMANDS
    state dynamic_node = {= self.data_model.get_node("Cell_Conveyor/dynamic_node") =}  
    state zero_node = {=NumericalVariableNode(name = "zero_node", description = "", value = 0) =}  
    //LocalVariables
    state pallets = {= [self.pallet_1, self.pallet_2, self.pallet_3, self.pallet_4, self.pallet_5, self.pallet_6, self.pallet_7, self.pallet_8, self.pallet_9, self.pallet_10] =}
    state bayes = {= {5: self.bay5, 11:self.bay1, 21:self.bay2, 31:self.bay3, 41:self.bay4} =}    
    state dict_bay_conveyor = {= {
                        1:"Z",
                        2:"P", 
                        3:"O", 
                        4:"N",
                        5:"G",
    } =}
                    
    conveyor = new Conveyor()

    // Periodically send messages to the conveyor system
    logical action check   
    state messages_to_conveyor = {=[]=}
    reaction(check) -> conveyor.from_frost{=
        # If there are messages, send the next one immediately; otherwise, wait 1 second
        if self.messages_to_conveyor:
            conveyor.from_frost.set(self.messages_to_conveyor.pop(0))
            check.schedule(0)
        else:
            check.schedule(SEC(1))
    =}

    method getTargetNode(destination){=
        """
        Returns the target node based on the destination value.
        :param destination: The destination value to determine the target node.
        :return: The target node as a string.
        """
        if destination == 5:
            return self.conveyor_obj + self.Bayes + self.Bay5 + "/" + self.IndexPosition + "/" + self.palletNum
        bay_map = {
            1: self.Bay1,
            2: self.Bay2,
            3: self.Bay3,
            4: self.Bay4
        }
        bay_num = int(destination / 10)
        pos_num = destination % 10
        bay = bay_map.get(bay_num)
        if bay:
            s = self.conveyor_obj + self.Bayes + bay + "/" + self.PalletPosition.format(n=pos_num) + "/" + self.palletNum
            return s
        raise ValueError("Invalid destination value")
    =}
    
    method setPalletDest(palletNumber, destination){=
        """
        Sets the destination of a pallet and sends a command to the conveyor system.
        :param palletNumber: The number of the pallet to set the destination for.
        :param destination: The destination to set for the pallet.
        :return: The destination as a string.
        """   
        pallet = self.pallets[palletNumber-1]
        (pallet.get_property("destination")).value =  destination     
        res = str(destination)
        if destination == 0:
            self.move_pallet_to_LTU(palletNumber)
            return res
        
        self.dynamic_node.value = self.getTargetNode(destination)
        logging.warning(f"Setting destination for pallet {palletNumber} to {destination}")        
        temp1 = destination
        temp2 = ""
        if temp1 != int(self.Bay.format(n=5)[-1]):
            temp1 = destination / 10
            temp2 = str(destination % 10)
        letter = self.dict_bay_conveyor[int(temp1)]
        self.messages_to_conveyor.append([1, [palletNumber, str(letter + temp2)]])
        return res
    =}
    
    method move_pallet_to_LTU(palletNumber){=
        """
        Releases a pallet by sending a command to the conveyor system.
        :param palletNumber: The number of the pallet to be released.
        :return: True if the pallet was successfully released, False otherwise.
        """
        self.dynamic_node.value = self.conveyor_obj + self.zero_node.name
        self.zero_node.value = palletNumber
        self.messages_to_conveyor.append([7, [palletNumber]])
        return True
    =}
    
    reaction(startup)-> check{=
        """
        Initializes the Cell_Conveyor reactor, setting up the initial state and scheduling the first check.
        """
        check.schedule(SEC(1))
        self.data_model.get_node(self.conveyor_obj).add_child(self.zero_node)
        self.setPalletDestination.callback = self.setPalletDest
    =}

    method update_segment(segment, value){=
        """
        Updates the segment state with the given value.
        :param segment: The segment to be updated.
        :param value: The value to set for the segment.
        """
        temp = segment.get_property(self.FIFO)
        temp.get_property(self.size).value += value[0]
        ls = []
        if value[0] > 0:
            for i in range(0, 9):                
                if temp.get_property(self.item.format(n=i)).value == 0:
                    temp.get_property(self.item.format(n=i)).value = value[1]
                    ls.append(temp.get_property(self.item.format(n=i)).value)
                    break       
                ls.append(temp.get_property(self.item.format(n=i)).value)  
        else:
            for i in range(0, 8):
                ls.append(temp.get_property(self.item.format(n=i)).value)
                temp.get_property(self.item.format(n=i)).value = temp.get_property(self.item.format(n=i+1)).value
            temp.get_property(self.item.format(n=9)).value = 0
            
        logging.info(f"Segment {segment.name} updated with values: {ls}")    
     =}

    method update_single_bay(bay, value){=
        """
        Updates the bay state with the given value.
        :param bay: The bay to be updated.
        :param value: The value to set for the pallet at the given position.
        """
        ls = []
        if bay == self.bay1:
            bay.get_property(self.PalletPosition.format(n=1)).get_property(self.palletNum).value = value[0] if value[1] > 0 else 0
            ls.append(self.bay1.get_property(self.PalletPosition.format(n=1)).get_property(self.palletNum).value)
        elif bay == self.bay5:
            self.bay5.get_property(self.IndexPosition).get_property(self.palletNum).value = value[0] if value[1] > 0 else 0
            ls.append(self.bay5.get_property(self.IndexPosition).get_property(self.palletNum).value)
        else:
            raise ValueError("Invalid bay for update")

        logging.info(f"{bay.name} updated with values: {ls}")
    =}

    method update_bay(bay, pallet, position, value){=
        """
        Updates the bay state with the given value.
        :param bay: The bay to be updated.
        :param pallet: The pallet number to set.
        :param position: The position in the bay.
        :param value: The value to set for the bay.
        """
        # Set the pallet number at the given position in the bay
        bay.get_property(self.PalletPosition.format(n=int(position))).get_property(self.palletNum).value = value
        logging.info(f"{bay.name} position {position} updated with {value}")
    =}
    
    reaction(conveyor.Segment1){=
        """
        Updates the Segment1 state with the value from the conveyor system.
        """
        self.update_segment(self.segment_1, conveyor.Segment1.value)
    =}
    reaction(conveyor.Segment2){=
        """
        Updates the Segment2 state with the value from the conveyor system.
        """
        self.update_segment(self.segment_2, conveyor.Segment2.value)
    =}
    reaction(conveyor.Segment3){=
        """
        Updates the Segment3 state with the value from the conveyor system.
        """
        self.update_segment(self.segment_3, conveyor.Segment3.value)
    =}
    reaction(conveyor.Segment4){=
        """
        Updates the Segment4 state with the value from the conveyor system. 
        """
        self.update_segment(self.segment_4, conveyor.Segment4.value)
    =}
    reaction(conveyor.Segment5){=
        """
        Updates the Segment5 state with the value from the conveyor system.
        """
        self.update_segment(self.segment_5, conveyor.Segment5.value)
    =}
    reaction(conveyor.Segment6){=
        """
        Updates the Segment6 state with the value from the conveyor system.
        """
        self.update_segment(self.segment_6, conveyor.Segment6.value)
    =}
    reaction(conveyor.Segment7){=
        """
        Updates the Segment7 state with the value from the conveyor system.
        """
        self.update_segment(self.segment_7, conveyor.Segment7.value)
    =}
    reaction(conveyor.Segment8){=
        """
        Updates the Segment8 state with the value from the conveyor system.
        """
        self.update_segment(self.segment_8, conveyor.Segment8.value)
    =}
    
    reaction(conveyor.Bay1){=
        """
        Updates the bay1 state with the value from the conveyor system.
        """
        self.update_single_bay(self.bay1, conveyor.Bay1.value)
    =}
    reaction(conveyor.Bay2_1){=
        """
        Updates the bay2 state at position 1 with the value from the conveyor system.
        """
        self.update_bay(self.bay2, conveyor.Bay2_1.value[0], conveyor.Bay2_1.value[1], conveyor.Bay2_1.value[2])
    =}
    reaction(conveyor.Bay2_2){=
        """
        Updates the bay2 state at position 2 with the value from the conveyor system.
        """
        self.update_bay(self.bay2, conveyor.Bay2_2.value[0], conveyor.Bay2_2.value[1], conveyor.Bay2_2.value[2])
    =}
    reaction(conveyor.Bay2_3){=
        """
        Updates the bay2 state at position 3 with the value from the conveyor system.
        """
        self.update_bay(self.bay2, conveyor.Bay2_3.value[0], conveyor.Bay2_3.value[1], conveyor.Bay2_3.value[2])
    =}

    reaction(conveyor.Bay3_1){=
        """
        Updates the bay3 state at position 1 with the value from the conveyor system.
        """
        self.update_bay(self.bay3, conveyor.Bay3_1.value[0], conveyor.Bay3_1.value[1], conveyor.Bay3_1.value[2])
    =}
    reaction(conveyor.Bay3_2){=
        """
        Updates the bay3 state at position 2 with the value from the conveyor system.
        """
        self.update_bay(self.bay3, conveyor.Bay3_2.value[0], conveyor.Bay3_2.value[1], conveyor.Bay3_2.value[2])
    =}
    reaction(conveyor.Bay3_3){=
        """
        Updates the bay3 state at position 3 with the value from the conveyor system.
        """
        self.update_bay(self.bay3, conveyor.Bay3_3.value[0], conveyor.Bay3_3.value[1], conveyor.Bay3_3.value[2])
    =}

    reaction(conveyor.Bay4_1){=
        """
        Updates the bay4 state at position 1 with the value from the conveyor system.
        """
        self.update_bay(self.bay4, conveyor.Bay4_1.value[0], conveyor.Bay4_1.value[1], conveyor.Bay4_1.value[2])
    =}
    reaction(conveyor.Bay4_2){=
        """
        Updates the bay4 state at position 2 with the value from the conveyor system.
        """
        self.update_bay(self.bay4, conveyor.Bay4_2.value[0], conveyor.Bay4_2.value[1], conveyor.Bay4_2.value[2])
    =}
    reaction(conveyor.Bay4_3){=
        """
        Updates the bay4 state at position 3 with the value from the conveyor system.
        """
        self.update_bay(self.bay4, conveyor.Bay4_3.value[0], conveyor.Bay4_3.value[1], conveyor.Bay4_3.value[2])
    =}
    reaction(conveyor.Bay5){=
        """
        Updates the Bay5 state with the value from the conveyor system.
        """
        self.update_single_bay(self.bay5, conveyor.Bay5.value)
    =}
}